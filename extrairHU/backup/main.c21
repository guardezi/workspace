#ifdef _CH_
#pragma package <opencv>
#endif

#include <cv.h>
#include <highgui.h>
#include <cvaux.h>
#include <stdio.h>
#include <time.h>

const char *VENTANA="Blob detection";

IplImage* imagen;
IplImage* roi;
IplImage* smooth;
IplImage* threshold;
IplImage* open_morf;
IplImage* blobResult;
IplImage* img_contornos;
CvMoments moments;
CvHuMoments humoments;
CvSeq* contour;
CvSeq* contourLow;

int main( int argc, char** argv )
{
	float hus[7];
	srand ( time(NULL) );
	if(argc >= 2 )
	{
		char* filename= argv[1];
		//load image  in gray level
		imagen=cvLoadImage(filename,0);
		//load image in RGB
//		imagen_color=cvLoadImage(filename,1);
	}else{
		printf("Use:\n\t%s image\n",argv[0]);
		return 0;
	}

	//Create needed images
	smooth= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);
	threshold= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);
	open_morf= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);

	//Init variables for countours
	contour = 0;
	contourLow = 0;
	//Create storage needed for contour detection
	CvMemStorage* storage = cvCreateMemStorage(0);
	cvCopyImage(imagen,threshold);

	//Smooth image
	cvSmooth(threshold, threshold, CV_GAUSSIAN, 3, 0, 0, 0);


//	threshold image
	cvThreshold(threshold, threshold, 0, 255, CV_THRESH_BINARY_INV);

	//Morfologic filters
//PRIMEIRO
	cvDilate(threshold, threshold, NULL,5);
	cvErode(threshold, threshold, NULL,5);
//	cvThreshold(threshold, threshold, 0, 255, CV_THRESH_BINARY_INV);
	cvSetImageROI(threshold, cvRect(0, 0, threshold->width/2, threshold->height/2));
	IplImage *img2 = cvCreateImage(cvGetSize(threshold),threshold->depth,	threshold->nChannels);
	cvCopy(threshold, img2, NULL);
	cvResetImageROI(threshold);
	cvMoments(img2, &moments,1);
	//	Now calculate hu moments
	cvGetHuMoments(&moments, &humoments);
	hus[0]=humoments.hu1;
	hus[1]=humoments.hu2;
	hus[2]=humoments.hu3;
	hus[3]=humoments.hu4;
	hus[4]=humoments.hu5;
	hus[5]=humoments.hu6;
	hus[6]=humoments.hu7;
//SEGUNDO
	cvSetImageROI(threshold, cvRect(0, threshold->height/2, threshold->width/2, threshold->height/2));
	//IplImage *img2 = cvCreateImage(cvGetSize(threshold),threshold->depth,	threshold->nChannels);
	cvCopy(threshold, img2, NULL);
	cvResetImageROI(threshold);
	cvMoments(img2, &moments,1);
	//	Now calculate hu moments
	cvGetHuMoments(&moments, &humoments);
	hus[0]+=humoments.hu1;
	hus[1]+=humoments.hu2;
	hus[2]+=humoments.hu3;
	hus[3]+=humoments.hu4;
	hus[4]+=humoments.hu5;
	hus[5]+=humoments.hu6;
	hus[6]+=humoments.hu7;
//TERCEIRO
	cvSetImageROI(threshold, cvRect(threshold->width/2, threshold->height/2, threshold->width/2, threshold->height/2));
	//IplImage *img2 = cvCreateImage(cvGetSize(threshold),threshold->depth,	threshold->nChannels);
	cvCopy(threshold, img2, NULL);
	cvResetImageROI(threshold);
	cvMoments(img2, &moments,1);
	//	Now calculate hu moments
	cvGetHuMoments(&moments, &humoments);
	hus[0]+=humoments.hu1;
	hus[1]+=humoments.hu2;
	hus[2]+=humoments.hu3;
	hus[3]+=humoments.hu4;
	hus[4]+=humoments.hu5;
	hus[5]+=humoments.hu6;
	hus[6]+=humoments.hu7;
//QUARTO
	cvSetImageROI(threshold, cvRect(threshold->width/2, 0, threshold->width/2, threshold->height/2));
	//IplImage *img2 = cvCreateImage(cvGetSize(threshold),threshold->depth,	threshold->nChannels);
	cvCopy(threshold, img2, NULL);
	cvResetImageROI(threshold);
	cvMoments(img2, &moments,1);
	//	Now calculate hu moments
	cvGetHuMoments(&moments, &humoments);
	hus[0]+=humoments.hu1;
	hus[1]+=humoments.hu2;
	hus[2]+=humoments.hu3;
	hus[3]+=humoments.hu4;
	hus[4]+=humoments.hu5;
	hus[5]+=humoments.hu6;
	hus[6]+=humoments.hu7;

//divide por 4
	hus[0]=hus[0]/4;
	hus[1]=hus[1]/4;
	hus[2]=hus[2]/4;
	hus[3]=hus[3]/4;
	hus[4]=hus[4]/4;
	hus[5]=hus[5]/4;
	hus[6]=hus[6]/4;
	//Show result.
	printf("%f %f %f %f %f %f %f ",hus[0] , hus[1], hus[2], hus[3], hus[4], hus[5], hus[6]);

	return 0;
}
